import{_ as t,o as n,c as a,a as s}from"./app-C0uy0hwi.js";const e={},d=s(`<h1 id="vcs-연동-인터페이스" tabindex="-1"><a class="header-anchor" href="#vcs-연동-인터페이스"><span>VCS 연동 인터페이스</span></a></h1><h2 id="환경-설정-하기" tabindex="-1"><a class="header-anchor" href="#환경-설정-하기"><span>환경 설정 하기</span></a></h2><p>Install NPM 패키지로 제공되며 npm install로 library를 다운로드 받을 수 있다.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm install vcs-sdk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>패키지를 설치 한 후, &quot;vcs-sdk&quot;를 import 하여 사용 가능하며 cs를 접근자로 사용 할 수 있다.</p><table><thead><tr><th>Function Name</th><th>Description</th></tr></thead><tbody><tr><td>cs.addEventListener</td><td>이벤트 등록 시 사용</td></tr><tr><td>cs.removeEventListener</td><td>이벤트 삭제 시 사용</td></tr><tr><td>cs.excuteEventListener</td><td>이벤트 실행 시 사용</td></tr><tr><td>cs.getStbInfo</td><td>셋탑 정보 조회 시 사용</td></tr><tr><td>cs.PlayVod</td><td>재생 요청 시 사용</td></tr><tr><td>cs.PlayChannel</td><td>채널 이동 요청 시 사용</td></tr><tr><td>cs.PlayApp</td><td>앱 실행 요청 시 사용</td></tr><tr><td>cs.setCookie</td><td>쿠키 세팅</td></tr></tbody></table><h2 id="cs-웹앱-접속-로직-개발" tabindex="-1"><a class="header-anchor" href="#cs-웹앱-접속-로직-개발"><span>CS 웹앱 접속 로직 개발</span></a></h2><div class="custom-container tip"><p class="custom-container-title">그림</p><p>추가 예정</p></div><ol><li>Settop Box(이하 STB)에서 CS 웹앱 화면 노출이 필요한 경우(ex. 리모콘 메뉴 키, vod 재생 종료 후 등) StartApp 규격을 통하여 웹앱으로 셋탑 정보 및 이동할 메뉴 경로를 전달한다.</li><li>VCS Library에서는 전달 된 셋탑 정보를 접근 할 수 있는 getStbInfo Function을 제공한다.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stbInfo <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getStbInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>StbInfo</th><th>Description</th></tr></thead><tbody><tr><td>stbId</td><td>셋탑 재개통 시, 변경 될 수 있는 값</td></tr><tr><td>modelName</td><td>모델명</td></tr><tr><td>mac</td><td>맥 정보 - 고유값</td></tr><tr><td>firmware</td><td>펌웨어 버전</td></tr></tbody></table><ol start="3"><li>이동할 메뉴는 Library에서 &quot;MenuNavigation&quot; event 로 전달하여 &quot;cs.addEventListener&quot;으로 받을 수 있으며 이동하는 메뉴명과, 메뉴에 필요한 데이터는 파라메터로 전달이 된다.</li></ol><ul><li><div class="custom-container warning"><p class="custom-container-title">주의</p><p>lifecycle에서 created되는 시점에 addEventListener를 등록하면, destroy 시점에 반드시 removeEventListener로 이벤트를 삭제 해주어야 한다. 삭제가 되지 않은 이벤트가 메모리 릭의 주된 원인 이므로 사용 시 주의 해야한다.</p></div></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>cs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;MenuNavigation&quot;</span><span class="token punctuation">,</span> receiveEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">function</span> <span class="token function">receiveEvent</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Event 받은 후 동작</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>menyName <span class="token operator">===</span> <span class="token string">&#39;HOME&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 홈메뉴 이동 요청</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>menyName <span class="token operator">===</span> <span class="token string">&#39;SYNOPSIS&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 시놉시스 이동 요청</span>
          <span class="token comment">// VOD 콘텐츠 정보 요청 (data.cid)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>menyName <span class="token operator">===</span> <span class="token string">&#39;PURCHASE&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 구매 이동 요청</span>
          <span class="token comment">// 상품 정보 요청 (data.pid)</span>
          <span class="token comment">// 콘텐츠 정보 요청 (data.cid)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>menyName <span class="token operator">===</span> <span class="token string">&#39;HOTKEY&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 핫키 이동 요청</span>

      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>menyName <span class="token operator">===</span> <span class="token string">&#39;EPG&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 편성표 이동 요청</span>
          <span class="token comment">// 디폴트 포커스 위치 확인(data.defaultChannel)</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Data</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>menuName</td><td>이동할 메뉴 명</td><td>HOME</td></tr><tr><td></td><td></td><td>SYNOPSIS</td></tr><tr><td></td><td></td><td>HOTKEY</td></tr><tr><td></td><td></td><td>EPG</td></tr><tr><td>cid</td><td>SYNOPSIS, PURCHASE 인 경우 필수</td><td>C0000011111</td></tr><tr><td>pid</td><td>PURCHASE인 경우 필수</td><td>P0000011111</td></tr><tr><td>menuids</td><td>HOTKEY인 경우 필수</td><td>MENU00001111</td></tr><tr><td>defaultChannel</td><td>포커스 위치 채널 번호. EPG인 경우 필수</td><td>11</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Home Component - Sample Code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="key-event-처리" tabindex="-1"><a class="header-anchor" href="#key-event-처리"><span>Key Event 처리</span></a></h2><p>TV 환경에서는 리모콘의 방향키로 이동 할 수 있는 포커스 기능이 제공되어야 하며, Hotkey를 통해 특정 메뉴로의 진입 및 이전 화면으로의 이동(history back)이 되어야 한다. VCS Library에서는 셋탑에서 전달되는 키 값을 웹앱에서 사용할 수 있는 키값으로 변환하여 제공 되며, PC에서 개발 시 사용할 수 있도록 키보드 키 값도 같이 제공을 한다.</p><ol><li>Single Page Application 에서는 키보드의 이전키(Back Space) 에 대해 preventDefault 처리를 해야한다.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> key <span class="token operator">=</span> KeyCodes<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>oEvent<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;BACK_SPACE&quot;</span> <span class="token operator">||</span> key <span class="token operator">===</span> <span class="token string">&quot;ENTER&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oEvent<span class="token punctuation">.</span>preventDefault <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    oEvent<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Key Event를 사용하려는 Component에서는 LifeCycle이 Created되는 시점에 KEYDOWN 이벤트를 등록한다.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>cs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;KEYDOWN&quot;</span><span class="token punctuation">,</span> keyDownHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">keyDownHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> nativeEvent <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;BACK_SPACE&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 이전키에 대한 동작</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Library에서섯 숫자, 방향, 특수키, hot 키에 대한 Key Code를 제공하며, PC에서 개발 할 때 사용할 수 있는 키를 같이 제공한다.</li></ol><table><thead><tr><th>KeyCode</th><th>key</th></tr></thead></table><p>3-1. 숫자키</p><table><thead><tr><th>KeyCode</th><th>key</th></tr></thead><tbody><tr><td>N0</td><td>Number 0</td></tr><tr><td>N1</td><td>Number 1</td></tr><tr><td>N2</td><td>Number 2</td></tr><tr><td>N3</td><td>Number 3</td></tr><tr><td>N4</td><td>Number 4</td></tr><tr><td>N5</td><td>Number 5</td></tr><tr><td>N6</td><td>Number 6</td></tr><tr><td>N7</td><td>Number 7</td></tr><tr><td>N8</td><td>Number 8</td></tr><tr><td>N9</td><td>Number 9</td></tr></tbody></table><p>3-2. 방향키</p><table><thead><tr><th>KeyCode</th><th>key</th></tr></thead><tbody><tr><td>UP</td><td>상 방향키</td></tr><tr><td>DOWN</td><td>하 방향키</td></tr><tr><td>LEFT</td><td>좌 방향키</td></tr><tr><td>RIGHT</td><td>우 방향키</td></tr></tbody></table><p>3-3. HOT 키 &amp; 특수 키</p><table><thead><tr><th>KeyCode</th><th>Key</th><th>PC Keyboard</th></tr></thead><tbody><tr><td>STAR</td><td>*</td><td>A</td></tr><tr><td>BACK_SPACE</td><td>뒤로가기 키</td><td>Back Space</td></tr><tr><td>ENTER</td><td>OK 키</td><td>Enter</td></tr><tr><td>EXIT</td><td>나가기 키</td><td>Exit</td></tr><tr><td>SHARP</td><td>#</td><td>S</td></tr><tr><td>SEARCH</td><td>검색 핫키</td><td>T</td></tr><tr><td>HOME</td><td>홈</td><td>Y</td></tr></tbody></table><h2 id="vod-재생-요청" tabindex="-1"><a class="header-anchor" href="#vod-재생-요청"><span>VOD 재생 요청</span></a></h2><p>VOD 재생 기능은 STB의 기능으로 웹앱과의 접속 종료를 의미한다. VOD를 재생 하기 위해서는 재생할 콘텐츠의 CID, 시작 시간을 STB으로 전달하고 STB은 PlayVod 요청을 받으면 세션을 종료한다.</p><div class="custom-container warning"><p class="custom-container-title">주의</p><p>VOD 재생 종료 후의 History를 유지하기 위해 VOD 재생 요청 시 현재까지 저장되어 있는 History 데이터를 서버에 저장한다. ( history 관리 및 복구 세션 참조 )</p></div><div class="custom-container tip"><p class="custom-container-title">그림</p><p>추가 예정</p></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>cs.playVod (cid, startTime, options)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Param</th><th>Type</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>cid</td><td>String</td><td>콘텐츠 ID</td><td>C000000000</td></tr><tr><td>startTime</td><td>String</td><td>시작 시간 (ms로 전달)</td><td>720000</td></tr><tr><td>options</td><td>JSON</td><td>재생을 위해 필요한 값</td><td>{}</td></tr></tbody></table><h3 id="app-실행-요청" tabindex="-1"><a class="header-anchor" href="#app-실행-요청"><span>APP 실행 요청</span></a></h3><p>APP 실행은 STB의 기능으로 웹앱과의 접속 종료를 의미한다. APP을 실행하기 위해서는 APP을 실행 할 수 있는 key 값이 전달되어야 하며 (ex. SKB : package name), STB은 playApp 요청을 받으면 세션을 종료한다.</p><div class="custom-container warning"><p class="custom-container-title">주의</p><p>APP 종료 후의 History를 유지하기 위해 APP 실행 요청 시 현재까지 저장되어 있는 History 데이터를 서버에 저장한다. ( history 관리 및 복구 세션 참조 )</p></div><table><thead><tr><th>Param</th><th>Type</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>packageName</td><td>String</td><td>APP을 실행 할 수 있는 값</td><td>APP000001</td></tr></tbody></table><h3 id="channel-진입-요청" tabindex="-1"><a class="header-anchor" href="#channel-진입-요청"><span>Channel 진입 요청</span></a></h3><p>Channel 진입 기능은 STB의 기능으로 웹앱과의 접속 종료를 의미한다. Channel 진입을 위해서는 이동할 Channel 번호가 전달되어야 하며, STB은 playChannel 요청을 받으면 세션을 종료한다.</p><div class="custom-container warning"><p class="custom-container-title">주의</p><p>널에 진입한 후에는 &quot;이전&quot;키를 눌렀을 경우 이전 채널로 이동을 하게 되므로 history를 별도로 관리하지 않으므로 세션 종료 시 History 데이터를 서버에 저장하지 않는다.</p></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>cs.playChannel (channelNum)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Param</th><th>Type</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>channelNum</td><td>String</td><td>이동할 채널 번호</td><td>11</td></tr></tbody></table><h3 id="cookie-적용" tabindex="-1"><a class="header-anchor" href="#cookie-적용"><span>Cookie 적용</span></a></h3><p>CS 환경에서는 Cookie 를 사용하지 않는 것을 권장한다. 필수로 사용을 해야하는 경우에는 제공되는 API로 사용해야 하며,</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>cs.setCookie (param)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Param</th><th>Type</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>channelNum</td><td>String</td><td>이동할 채널 번호</td><td>11</td></tr></tbody></table>`,49),p=[d];function o(i,c){return n(),a("div",null,p)}const r=t(e,[["render",o],["__file","getting-started.html.vue"]]),u=JSON.parse('{"path":"/libVCS/getting-started.html","title":"VCS 연동 인터페이스","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"환경 설정 하기","slug":"환경-설정-하기","link":"#환경-설정-하기","children":[]},{"level":2,"title":"CS 웹앱 접속 로직 개발","slug":"cs-웹앱-접속-로직-개발","link":"#cs-웹앱-접속-로직-개발","children":[]},{"level":2,"title":"Key Event 처리","slug":"key-event-처리","link":"#key-event-처리","children":[]},{"level":2,"title":"VOD 재생 요청","slug":"vod-재생-요청","link":"#vod-재생-요청","children":[{"level":3,"title":"APP 실행 요청","slug":"app-실행-요청","link":"#app-실행-요청","children":[]},{"level":3,"title":"Channel 진입 요청","slug":"channel-진입-요청","link":"#channel-진입-요청","children":[]},{"level":3,"title":"Cookie 적용","slug":"cookie-적용","link":"#cookie-적용","children":[]}]}],"git":{"updatedTime":1717567409000},"filePathRelative":"libVCS/getting-started.md"}');export{r as comp,u as data};
